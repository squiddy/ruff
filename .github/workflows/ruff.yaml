name: "[ruff] Release"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PACKAGE_NAME: ruff
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

jobs:
  # https://iscinumpy.dev/post/cibuildwheel-2-10-0/
  generate-wheels-matrix:
    name: Generate wheels matrix
    runs-on: ubuntu-latest
    outputs:
      include: ${{ steps.set-matrix.outputs.include }}
    steps:
      - uses: actions/checkout@v3
      - name: Install cibuildwheel
        run: pipx install cibuildwheel==2.11.4
      - id: set-matrix
        run: |
          MATRIX=$(
            {
              cibuildwheel --print-build-identifiers --platform linux \
              | jq -nRc '{"only": inputs, "os": "ubuntu-latest"}' \
              && cibuildwheel --print-build-identifiers --platform macos \
              | jq -nRc '{"only": inputs, "os": "macos-latest"}' \
              && cibuildwheel --print-build-identifiers --platform windows \
              | jq -nRc '{"only": inputs, "os": "windows-latest"}'
            } | jq -sc
          )
          echo "include=$MATRIX" >> $GITHUB_OUTPUT
    env:
      CIBW_ARCHS_LINUX: x86_64 i686 aarch64 ppc64le s390x
      CIBW_ARCHS_MACOS: arm64 universal2
      CIBW_ARCHS_WINDOWS: x86 AMD64
      # We're building abi3 compatible wheels, we can build using one version of python
      CIBW_BUILD: "cp311-*"
      # Unsupported by rust
      CIBW_SKIP: '*-musllinux_i686 *-musllinux_ppc64le *-musllinux_s390x'

  build-wheels:
    name: Build ${{ matrix.only }}
    needs: generate-wheels-matrix
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate-wheels-matrix.outputs.include) }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - run: rustup target add aarch64-apple-darwin
        if: matrix.os == 'macos-latest'

      - run: rustup toolchain install stable-i686-pc-windows-msvc
        if: matrix.os == 'windows-latest'

      - run: rustup target add i686-pc-windows-msvc
        if: matrix.os == 'windows-latest'

      - uses: pypa/cibuildwheel@v2.11.4
        with:
          only: ${{ matrix.only }}
        env:
          CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH" CARGO_TERM_COLOR="always"'
          CIBW_ENVIRONMENT_WINDOWS: 'PATH="$UserProfile\.cargo\bin;$PATH"'
          CIBW_ARCHS_LINUX: auto aarch64 ppc64le s390x
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BEFORE_BUILD: rustup show
          CIBW_BEFORE_BUILD_LINUX: >
            curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain=stable --profile=minimal -y &&
            rustup show
          CIBW_TEST_COMMAND: >
            ruff --version &&
            python -m ruff --version

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - build-wheels
    if: "startsWith(github.ref, 'refs/tags/')"
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - uses: actions/setup-python@v4
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.RUFF_TOKEN }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *
